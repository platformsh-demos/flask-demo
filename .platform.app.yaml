# The name of this app. Must be unique within a project.
name: flask

# The runtime the application uses.
type: 'python:3.8'

variables:
    env:
        FLASK_APP: flaskr
        FLASK_ENV: production
        PACKAGE_MANAGER: poetry
        PIP_VERSION: 22.0.4
        PIPENV_VERSION_BUILD: 2022.4.21
        POETRY_VERSION: 1.1.13
        POETRY_VIRTUALENVS_IN_PROJECT: true
        POETRY_VIRTUALENVS_CREATE: false

hooks:
    build: |
        set -e
        # Setup pip.
        python -m pip install pip==$PIP_VERSION
        ############### PIPENV ###################
        if [ "$PACKAGE_MANAGER" = "pipenv" ]; then
            # Install pipenv.
            pip install pipenv==$PIPENV_VERSION_BUILD
            # Check and verify the lockfile. Track failures.
            pipenv check && pipenv verify && pipenv --support > pipenv.support
            # Install dependencies to the virtual environment.
            VENV_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))')
            pipenv --python $VENV_VERSION
            pipenv install --deploy
        ############### POETRY ###################
        elif [ "$PACKAGE_MANAGER" = "poetry" ]; then
            # Install Poetry.
            POETRY_INSTALLER='https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py'
            curl -sSL $POETRY_INSTALLER | POETRY_VERSION=$POETRY_VERSION python -
            # Check lockfile and install dependencies.
            poetry env use system
            poetry check
            poetry install
        fi
    deploy: |
        ############### PIPENV ###################
        if [ "$PACKAGE_MANAGER" = "pipenv" ]; then
            if [ ! -f "instance/flaskr.sqlite" ]; then
                pipenv run flask init-db
            fi
        ############### POETRY ###################
        elif [ "$PACKAGE_MANAGER" = "poetry" ]; then
            if [ ! -f "instance/flaskr.sqlite" ]; then
                poetry run flask init-db
            fi
        fi   

web:
    upstream:
        socket_family: unix
    commands:
        start: |
            ############### PIPENV ###################
            if [ "$PACKAGE_MANAGER" = "pipenv" ]; then
                pipenv run gunicorn -w 4 -b unix:$SOCKET "flaskr:create_app()"
            ############### POETRY ###################
            elif [ "$PACKAGE_MANAGER" = "poetry" ]; then
                poetry run blackfire-python gunicorn -w 4 -b unix:$SOCKET "flaskr:create_app()"
            fi


# The relationships of the application with services or other applications.
relationships:
    database: "db:mysql"
    rediscache: "cache:redis"

# The size of the persistent disk of the application (in MB).
disk: 1024

mounts:
    'instance':
        source: local
        source_path: instance

source:
  operations:
    auto-update:
      command: |
        curl -fsS https://raw.githubusercontent.com/platformsh/source-operations/main/setup.sh | { bash /dev/fd/3 sop-autoupdate; } 3<&0
